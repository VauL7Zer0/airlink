

// Append to file
// @description **Description:**
// @description Appends data to an existing file, or creates a new file if file does not exist
// @description ---
//
// @description **Parameters:**
// @param {string} savePath
// @description - `savePath`:`<string>`
// @param {string} `saveFile`:`<string>`
// @description - `saveFile`:`<string>`
// @param {string} `newText`:`<string>`
// @description - `newText`:`<string>`
//
// @description **Parameter Defaults:**
// @description - `none`
//
// @description **Return:**
// @return {void}
// @description `void`
// @description ---
//    
// @description **Author:** Svarii
// @description **Version:** 0.0.1
// @description ---
//
// @description ***footnotes***   
// @description Parameters are not checked for validity   
// @description ---        
//
// @example 
// @example dataString = "0xFC45B2XR9:missspeling"
// @example
// file_append("/DatabaseDir", "addressData.db", dataString) //Appends dataString to file
// @description ---  
	file_append = function(savePath, saveFile, newText)
		//********************************************
		locals.fileContent = ""
		locals.fileLocation = locals.savePath + "/" + locals.saveFile
		//********************************************	
		locals.hostComputer = get_shell.host_computer
		locals.fileObj = locals.hostComputer.File(locals.fileLocation)
		if not locals.fileObj then
			locals.hostComputer.touch(locals.savePath, locals.saveFile)
			locals.fileObj = locals.hostComputer.File(locals.fileLocation)
		end if
		//********************************************
		//********************************************		
		if locals.fileObj.has_permission("r") then
			if locals.fileObj.has_permission("w") then
				locals.fileContent = locals.fileObj.get_content
				if locals.fileContent == null then
					locals.fileObj.set_content(locals.newText)
				else
					locals.fileObj.set_content(locals.fileContent + locals.newText)
				end if
			else
			print("Permission Error Saving Data to: " + locals.saveFile + " [No Write Permission]")
			end if
		else
			print("Permission Error Saving Data to: " + locals.saveFile + " [No Read Permission]")
		end if
	end function
// @startuml
// start
// :<color:purple>fileContent = ""</color>;
// :<color:purple>fileLocation = savePath + "/" + saveFile</color>;
// :<color:purple>hostComputer = get_shell.host_computer</color>;
// :<color:purple>fileObj = hostComputer.File(fileLocation)</color>;
// if (<color:blue>fileObj does not exist?</color>) then (<color:red>Yes</color>)
//   :<color:purple>Create file: touch(savePath, saveFile)</color>;
//   :<color:purple>fileObj = hostComputer.File(fileLocation)</color>;
// endif
// if (<color:blue>fileObj has both read and write permission?</color>) then (<color:green>Yes</color>)
//   :<color:purple>fileContent = fileObj.get_content</color>;
//   if (<color:blue>fileContent is null?</color>) then (<color:red>Yes</color>)
//     :<color:purple>Set file content to newText</color>;
//   else (<color:green>No</color>)
//     :<color:purple>Append newText to existing content</color>;
//   endif
// else (<color:red>No Read/Write Permission</color>)
//   :<color:red>Print permission error</color>;
// endif
// stop
// @enduml

// Return Network Devices in a list of lists
    // @description **Description**
    // @description Pull network devices from host computer and return a list of network device information as lists
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [user]
    // @param {string} [pass]
    // @description - `user` (**string**, *optional*): The username to use for access
    // @description - `pass` (**string**, *optional*): The password to use for access
    // @description ---
    //
    // @description **Default Parameters:**
    // @description - none
    //
    // @return {list<list<string>>}
    // @description **Return**
    // `list[list[string, string, string]]`:`[adaptor, model, monitor_enabled]`
    // @description ---    
    //    
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---    
network_device_list = function(user = "", pass = "")
    locals.networkDevices = split(get_shell(locals.user, locals.pass).host_computer.network_devices, char(10))
    locals.networkDeviceList = []
    for device in locals.networkDevices
        if locals.device then locals.networkDeviceList.push(split(locals.device, " "))
    end for
    return locals.networkDeviceList
end function
    // @startuml
    // start
    // :<color:purple>networkDevices = split(get_shell(user, pass).host_computer.network_devices, char(10))</color>;
    // :<color:purple>networkDeviceList = []</color>;
    // :<color:blue>For each device in networkDevices</color>;
    // repeat
    //   if (<color:blue>device exists?</color>) then (<color:green>Yes</color>)
    //     :<color:purple>Push split(device, " ") into networkDeviceList</color>;
    //   endif
    // repeat while (another device exists)
    // :<color:green>return networkDeviceList</color>;
    // stop
    // @enduml

// Applies pos arse tag to the string
    // @description **Description:**
    // @description Modifies a text string by prepending it with the pos tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `position`
    //
    // @description **Parameter Defaults:**
    // @description - `position`:`"50%"`    
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string prepended with the `<pos>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Horizontal Position](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextPos.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.pos
    //  @example 
    //  print(result); // Output: <pos=50%>Hello
string.pos = function(position = "50%")
    return "<pos=" + locals.position + ">" + self
end function

// Applies line-indent tag to the string
    // @description **Description:**
    // @description Modifies a text string to wrap it in the line-indent tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [alignment]
    // @description - `alignment` Accepted values: `left`, `center`, `right`, `justified`, and `flush`
    // @param {boolean} [closeTag]
    // @description - `closeTag` Accepted values: `true` or `false`
    //
    // @description **Parameter Defaults:**
    // @description - `alignment`:`center`
    // @description - `closeTag`:`true`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` the string value embedded in (or preceded by) the `<align>` tag
    // @description ---
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    // @description ---        
    // @description **Links:**
    // @description [Text Mesh Pro: Rich Text Line Indentation](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextLineIndentation.html)
    // @description ---       
    // @description ***footnotes***   
    // @description Parameters are not checked for validity   
    // @description - `alignment` will not reject invalid values | **Return**: `string<withParseIssues>`
    // @description - `closeTag` will not reject invalid values | **Return**: `null`
    // @description
    // @description If all paramaters passed are invalid | **Return**: `null`
    // @description ---          
    //
    // @return {string}
    // @example newString = "Hello"
    // @example 
    // @example result = newString.line_indent("50%")
    // @example 
    // print(result); // Outputs: <line-indent=50%>Hello      
string.line_indent = function(lineIndent = "15%")
    return "<line-indent=" + locals.lineIndent + ">" + self
end function

// Applies underline tag to the string
    // @description **Description:**
    // @description Modifies a text string by wrapping it within the underline tag
    // @description ---
    //
    // @description **Parameters:**
    // @description * `none`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string wrapped within the `<u>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Underline](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextStrikethroughUnderline.html)	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.underline
    //  @example 
    //  print(result); // Output: <u>Hello</u>
string.underline = function()
    return "<u>" + self + "</u>"
end function

// Applies mark tag to the string
    // @description **Description:**
    // @description Modifies a text string by wraping it within the mark tag
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} [color]
    // @description - `color`:`string` | #RRGGBBAA [ HEXA ] 
    //
    // @description **Parameter Defaults:**
    // @description - `color`:`#FFFF00AA`
    //
    // @description **Return:**
    // @return {string}
    // @description `string` The string value wrapped within the `<mark>` tag
    // @description ---
    //
    // @description **Links:**
    // @description - [Text Mesh Pro: Rich Text mark](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextMark.html  )	
    // @description ---	
    //
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---
    //
    //  @example newString = "Hello"
    //  @example 
    //  @example result = newString.mark
    //  @example 
    //  print(result); // Outputs: <mark="#FFFF002C">Hello</mark>   
string.mark = function(color="#FFFF002C")
    return "<mark=" + locals.color + ">" + self + "</mark>"
end function

// Keeps a number within a specified range
	// @description **Description:**
	// @description Ensure an number stays between a minimim and maximum value
	// @description ---
	//
	// @description **Parameters:**
    // @param {number} min - The mix threshold.
    // @param {number} max - The max threshold.    
	// @description - `min` The mix threshold.
    // @description - `max` The max threshold.
    //
	// @description **Parameter Defaults:**
    // @description - none
    // @description ---
    //
	// @description **Return:**
	// @return {number} he result of the clamp
	// @description `number` clamped number
	// @description ---
	//
	// @description **Author:** Svarii
	// @description **Version:** 0.0.1
	// @description ---
	//
	// @example myNumber = 42
    // @example
    // print myNumber.clamp(42, 100) // Return 42
    // @example
    // print myNumber.clamp(75, 100) // Return 75
    // @example
    // print myNumber.clamp(0, 40) // Return 40
	// @description ---
number.clamp = function(min, max)
            if self < locals.min then return locals.min
            if self > locals.max then return locals.max
            return self
end function
	// @startuml
	// title <color:purple>number.clamp Method Diagram</color>
	// 
	// class NumberObject {
	//   + value : number
	//   + clamp(min: number, max: number) : number
	// }
	// 
	// note right of NumberObject
	//   The clamp method limits the value to a given range.
	//   For example:
	//     • 7.clamp(2,6) returns 6 (upper bound enforced)
	//     • 1.clamp(2,6) returns 2 (lower bound enforced)
	// end note
	// 
	// @enduml


    //@name minus
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".minus" as minus
        //  * NumberObject -> minus : number
        //  * minus -> NumberObject : (number - 1)
        //  * NumberObject -> minus : number(7)
        //  * minus -> NumberObject : (number - 7)        
        //  * footer
        //  * number.minus
        //  * endfooter         
        //  * @enduml         

        //  **Description:**
        //  Subtract 1 from the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to add.
        //  @return {number} - The result of the subtraction.
        //  @example newNumber = 44
        //  @example 
        //  @example result = newNumber.minus(2)
        //  @example        
        //  print(result); // Output: 42
    number.minus = function(amount = 1)
            return self - locals.amount
    end function	

    //@name plus 
        //  *
        //  * @uml
        //  * @startuml
        //  * entity NumberObject
        //  * control ".plus" as plus
        //  * NumberObject -> plus : number
        //  * plus -> NumberObject : (number + 1)
        //  * NumberObject -> plus : number(7)
        //  * plus -> NumberObject : (number + 7)        
        //  * footer
        //  * number.plus
        //  * endfooter         
        //  * @enduml           

        //  **Description:**
        //  Add 1 to the number or optional amount
        //  @description     
        //  @param {number} [amount] - The amount to add.
        //  @return {number} - The result of the addition.
        //  @example newNumber = 40
        //  @example 
        //  @example result = newNumber.plus(2);
        //  @example
        //  print(result); // Outputs: 42
    number.plus = function(amount = 1)
            return self + locals.amount
    end function
	
    // **Description:**
    // Caculates the recommended amount of ACKs to collect
    // @param {number} signalStrength - `signlaStrength`:`number`
    // @description ---
    //
    // @description **Parameters:**
    // @param {string} signalStrength - The name of the library to load.
    // @description - `signalStrength`:`number`
    // @description ---
    //
    // @description **Parameter Defaults:**
    // @description - `signalStrength`:`1`
    // @description ---   
    //
    // @description **Return:**
    // @return {number}
    // @description `number` Recommended number of ACKs to collect
    // @description ---   
    //    
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---    
    //
    // @example reqACK = calculate_acks(6) // Signal Strength 6%
    // @example
    // print(reqACK) // Output: 14286
get_acks = function(signalStrength = 1)
    if not typeof(locals.signalStrength) == "number" then return null
    if locals.signalStrength <= 0 or locals.signalStrength > 100 then return null
    return ceil(300000 / (locals.signalStrength + 15))
end function
    // @startuml
    // start
    // :<color:purple>signalStrength = 1 (default)</color>;
    // if (<color:blue>is signalStrength a number?</color>) then (<color:red>No</color>)
    //   :<color:red>return <b>null</b></color>;
    //   stop
    // else (<color:green>Yes</color>)
    // endif
    // if (<color:blue>is signalStrength > 0 and <= 100?</color>) then (<color:red>No</color>)
    //   :<color:red>return <b>null</b></color>;
    //   stop
    // else (<color:green>Yes</color>)
    // endif
    // :<color:purple>numofACK = ceil(300000 / (signalStrength + 15))</color>;
    // :<color:green>return <b>numofACK</b></color>;
    // stop
    // @enduml	

//  Remove the last character of the given text.
    //  
    //  @return {string}
    //  @example newString = "Hello"
    //  @example             
    //  @example result = newString.remove_char_last
    //  @example          
    //  print(result); // Outputs: Hell
string.remove_char_last = function()
    return slice(self, 0, (self.len - 1))
end function
    //@name remove_char_last
        //  *
        //  * @uml
        //  * @startuml
        //  * entity StringObject
        //  * control ".remove_char_last" as remove_char_last
        //  * StringObject -> remove_char_last : string
        //  * remove_char_last -> StringObject : strin
        //  * footer
        //  * string.remove_char_last
        //  * endfooter 
        //  * @enduml        

// Applies bold tag to the string
    // @description **Description:**
    // @description Modifies a text string and wraps within the bold tag
    // @description ---
    //
    // @description **Parameters:**
    // @description - None
    //
    // @description **Return:**
    // @return {string}
    // @description `string` the string value embedded in the `<b>` tag
    // @description ---
    //
    // @description **Links:**
    // @description [Text Mesh Pro: Rich Text Bold](https://docs.unity3d.com/Packages/com.unity.textmeshpro@4.0/manual/RichTextBoldItalic.html)
    // @description ---
    //    
    // @description **Author:** Svarii
    // @description **Version:** 0.0.1
    // @description ---     
    //
    // @example newString = "Hello"
    // @example 
    // @example result = newString.bold
    // @example 
    // print(result); // Output: <b>Hello</b>          
    // @description --- 
string.bold = function()
    return "<b>" + self + "</b>"
end function  

        //  **Description:**
        //  Generate a random number from 0 to number, or from optional minimum to number
        //  @param {number} [min]
        //  @return {number} - The result of the subtraction.
        //  @example myNumber = 100;
        //  @example 
        //  @example result = myNumber.random_from(50);
        //  @example
        //  print(result); // Output: A random number between 50 and 100
    number.random_from = function(min = 0)
            locals.max = self
            return floor((rnd * (locals.max - locals.min + 1)) + locals.min)  
    end function
    //@name random_from
        //  * @startuml
        //  * entity NumberObject
        //  * control ".random_from" as random_from
        //  *   NumberObject -> random_from : number
        //  *   random_from -> NumberObject : [random number in range]     
        //  * footer
        //  *   number.random_from([opt:min])
        //  * endfooter         
        //  * @enduml         


report_string_construct__ = function()
	locals.fail = new {"classID": "errorStrings"}
	locals.pass = new {"classID": "passStrings"}
	locals.action = new {"classID": "actionStrings"}
	locals.info = new {"classID": "infoStrings"}
	locals.email = new {"classID": "emailString"}
	locals.status = {"classID": "gstexts", "fail": locals.fail, "pass": locals.pass, "action": locals.action, "info": locals.info, "email": locals.email}
	locals.status.fail.network_devices_found = "No network devices found"
	locals.status.pass.network_devices_found = "Network device(s) found  "
	locals.status.fail.lib_found = "Library not found"
	locals.status.pass.lib_found = "Library found"
	locals.status.fail.file_found = "File not found"
	locals.status.pass.file_found = "File found"
	locals.status.fail.dir_found = "Directory not found"
	locals.status.pass.dir_found = "Directory found"
	locals.status.fail.user_found = "User not found"
	locals.status.pass.user_found = "User found"
	locals.status.fail.default = "FAIL"
	locals.status.pass.default = "PASS"
	locals.status.fail.check_user_email = "eMail not found"
	locals.status.pass.check_user_email = "eMail Found"	
	locals.status.fail.check_user_bank = "bank account not found"
	locals.status.pass.check_user_bank = "bank account Found"
	locals.status.info.active_card_wifi = "Connected to WIFI"
	locals.status.info.active_card_ethernet = "Connected to Ethernet"				
	locals.status.action.check_network_devices = "Checking Network Devices..."
	locals.status.action.check_user_email = "Checking for email account..."
	locals.status.action.check_user_bank = "Checking for bank account..."
	locals.status.action.check_active_net_card = "Checking for active net card..."
	locals.status.fail.has_internet = "No Internet Connection"
	locals.status.pass.has_internet = "Internet Connection Found"
	locals.status.action.has_internet = "Checking Internet Connection..."
	locals.status.fail.has_lib_dir = "lib directory not found"
	locals.status.pass.has_lib_dir = "lib directory Found"
	locals.status.action.has_lib_dir = "Checking for lib directory..."
	locals.status.fail.has_metaxploit = "metaxploit not found"
	locals.status.pass.has_metaxploit = "metaxploit found"
	locals.status.fail.has_cryptoLib = "crypto.so not found"
	locals.status.pass.has_cryptoLib = "crypto.so found"	
	locals.status.action.has_metaxploit = "Checking for metaxploit.so..."	
	locals.status.action.has_cryptoLib = "Checking for crypto.so..."
	locals.status.action.has_banktxt = "Checking for Bank.txt..."
	locals.status.action.has_mailtxt = "Checking for Mail.txt..."
	locals.status.action.has_guestfolder = "Checking for /home/guest folder..."
	return locals.status
end function

string.color = function(colorValue)
	if not typeof(colorValue) == "string" then return self
	//*****************************************************
	// Red HEX Codes
	//*****************************************************	
	if colorValue == "IndianRed" then colorValue = "#CD5C5C"
	if colorValue == "LightCoral" then colorValue = "#F08080"
	if colorValue == "Salmon" then colorValue = "#FA8072"
	if colorValue == "DarkSalmon" then colorValue = "#E9967A"
	if colorValue == "LightSalmon" then colorValue = "#FFA07A"			
	if colorValue == "Crimson" then colorValue = "#DC143C"
	if colorValue == "Red" then colorValue = "#FF0000"
	if colorValue == "FireBrick" then colorValue = "#B22222"
	if colorValue == "DarkRed" then colorValue = "#8B0000"
	//*****************************************************
	// Pink HEX Codes
	//*****************************************************		
	if colorValue == "Pink" then colorValue = "#FFC0CB"
	if colorValue == "LightPink" then colorValue = "#FFB6C1"		
	if colorValue == "HotPink" then colorValue = "#FF69B4"		
	if colorValue == "DeepPink" then colorValue = "#FF1493"		
	if colorValue == "MediumVioletRed" then colorValue = "#C71585"				
	if colorValue == "PaleVioletRed" then colorValue = "#DB7093"				
	//*****************************************************
	// Orange HEX Codes
	//*****************************************************					
	if colorValue == "Coral" then colorValue = "#FF7F50"						
	if colorValue == "Tomato" then colorValue = "#FF6347"				
	if colorValue == "OrangeRed" then colorValue = "#FF4500"						
	if colorValue == "DarkOrange" then colorValue = "#FF8C00"				
	if colorValue == "Orange" then colorValue = "#FFA500"						
	//*****************************************************
	// Yellow HEX Codes
	//*****************************************************
	if colorValue == "Gold" then colorValue = "#FFD700"
	if colorValue == "Yellow" then colorValue = "#FFFF00"
	if colorValue == "LightYellow" then colorValue = "#FFFFE0"
	if colorValue == "LemonChiffon" then colorValue = "#FFFACD"
	if colorValue == "LightGoldenrodYellow" then colorValue = "#FAFAD2"        
	if colorValue == "PapayaWhip" then colorValue = "#FFEFD5"
	if colorValue == "Moccasin" then colorValue = "#FFE4B5"
	if colorValue == "PeachPuff" then colorValue = "#FFDAB9"
	if colorValue == "PaleGoldenrod" then colorValue = "#EEE8AA"
	if colorValue == "Khaki" then colorValue = "#F0E68C"                                					
	if colorValue == "DarkKhaki" then colorValue = "#BDB76B"                                					        
	//*****************************************************
	// Purple HEX Codes
	//*****************************************************
	if colorValue == "Lavender" then colorValue = "#E6E6FA"
	if colorValue == "Thistle" then colorValue = "#D8BFD8"
	if colorValue == "Plum" then colorValue = "#DDA0DD"
	if colorValue == "Violet" then colorValue = "#EE82EE"
	if colorValue == "Orchid" then colorValue = "#DA70D6"        
	if colorValue == "Fuchsia" then colorValue = "#FF00FF"
	if colorValue == "Magenta" then colorValue = "#FF00FF"
	if colorValue == "MediumOrchid" then colorValue = "#BA55D3"
	if colorValue == "MediumPurple" then colorValue = "#9370DB"
	if colorValue == "RebeccaPurple" then colorValue = "#663399"                                					
	if colorValue == "BlueViolet" then colorValue = "#8A2BE2"
	if colorValue == "DarkViolet" then colorValue = "#9400D3"
	if colorValue == "DarkOrchid" then colorValue = "#9932CC"
	if colorValue == "DarkMagenta" then colorValue = "#8B008B"
	if colorValue == "Purple" then colorValue = "#800080"
	if colorValue == "Indigo" then colorValue = "#4B0082"        
	if colorValue == "SlateBlue" then colorValue = "#6A5ACD"
	if colorValue == "DarkSlateBlue" then colorValue = "#483D8B"
	if colorValue == "MediumSlateBlue" then colorValue = "#7B68EE" 
	//*****************************************************
	// Green HEX Codes
	//*****************************************************
	if colorValue == "GreenYellow" then colorValue = "#ADFF2F"
	if colorValue == "Chartreuse" then colorValue = "#7FFF00"
	if colorValue == "LawnGreen" then colorValue = "#7CFC00"
	if colorValue == "Lime" then colorValue = "#00FF00"
	if colorValue == "LimeGreen" then colorValue = "#32CD32"        
	if colorValue == "PaleGreen" then colorValue = "#98FB98"
	if colorValue == "LightGreen" then colorValue = "#90EE90"
	if colorValue == "MediumSpringGreen" then colorValue = "#00FA9A"
	if colorValue == "SeaGreen" then colorValue = "#2E8B57"
	if colorValue == "ForestGreen" then colorValue = "#228B22"                                					
	if colorValue == "Green" then colorValue = "#008000"
	if colorValue == "DarkGreen" then colorValue = "#006400"
	if colorValue == "YellowGreen" then colorValue = "#9ACD32"
	if colorValue == "OliveDrab" then colorValue = "#6B8E23"
	if colorValue == "Olive" then colorValue = "#808000"
	if colorValue == "DarkOliveGreen" then colorValue = "#556B2F"        
	if colorValue == "MediumAquamarine" then colorValue = "#66CDAA"
	if colorValue == "DarkSeaGreen" then colorValue = "#8FBC8B"
	if colorValue == "LightSeaGreen" then colorValue = "#20B2AA" 
	if colorValue == "DarkCyan" then colorValue = "#008B8B"        
	if colorValue == "Teal" then colorValue = "#008080"
	//*****************************************************
	// Blue HEX Codes
	//*****************************************************	
	if colorValue == "Aqua" then colorValue = "#00FFFF"
	if colorValue == "Cyan" then colorValue = "#00FFFF"
	if colorValue == "LightCyan" then colorValue = "#E0FFFF"
	if colorValue == "PaleTurquoise" then colorValue = "#AFEEEE"
	if colorValue == "Aquamarine" then colorValue = "#7FFFD4"        
	if colorValue == "Turquoise" then colorValue = "#40E0D0"
	if colorValue == "MediumTurquoise" then colorValue = "#48D1CC"
	if colorValue == "DarkTurquoise" then colorValue = "#00CED1"
	if colorValue == "CadetBlue" then colorValue = "#5F9EA0"
	if colorValue == "SteelBlue" then colorValue = "#4682B4"                           					
	if colorValue == "LightSteelBlue" then colorValue = "#B0C4DE"
	if colorValue == "PoweredBlue" then colorValue = "#B0E0E6"
	if colorValue == "LightBlue" then colorValue = "#ADD8E6"
	if colorValue == "SkyBlue" then colorValue = "#87CEEB"
	if colorValue == "LightSkyBlue" then colorValue = "#87CEFA"
	if colorValue == "DeepSkyBlue" then colorValue = "#00BFFF"        
	if colorValue == "DodgerBlue" then colorValue = "#1E90FF"
	if colorValue == "CornflowerBlue" then colorValue = "#6495ED"
	if colorValue == "MediumSlateBlue" then colorValue = "#7B68EE"
	if colorValue == "RoyalBlue" then colorValue = "#4169E1"
	if colorValue == "Blue" then colorValue = "#0000FF"
	if colorValue == "MediumBlue" then colorValue = "#0000CD"
	if colorValue == "DarkBlue" then colorValue = "#00008B"  
	if colorValue == "Navy" then colorValue = "#000080"
	if colorValue == "MidnightBlue" then colorValue = "#191970"                        
	//*****************************************************
	// Brown HEX Codes
	//*****************************************************	
	if colorValue == "Cornsilk" then colorValue = "#FFF8DC"
	if colorValue == "BlanchedAlmond" then colorValue = "#FFEBCD"
	if colorValue == "Bisque" then colorValue = "#FFE4C4"
	if colorValue == "NavajoWhite" then colorValue = "#FFDEAD"
	if colorValue == "Wheat" then colorValue = "#F5DEB3"        
	if colorValue == "BurlyWood" then colorValue = "#D#B887"
	if colorValue == "Tan" then colorValue = "#D2B48C"
	if colorValue == "RosyBrown" then colorValue = "#BC8F8F"
	if colorValue == "SandyBrown" then colorValue = "#F4A460"
	if colorValue == "Goldenrod" then colorValue = "#DAA520"                                					
	if colorValue == "DarkGoldenrod" then colorValue = "#B8860B"
	if colorValue == "Peru" then colorValue = "#CD853F"
	if colorValue == "Chocolate" then colorValue = "#D2691E"
	if colorValue == "SaddleBrown" then colorValue = "#8B4513"
	if colorValue == "Sienna" then colorValue = "#A0522D"
	if colorValue == "Brown" then colorValue = "#A52A2A"        
	if colorValue == "Maroon" then colorValue = "#800000"          			
	//*****************************************************
	// White HEX Codes
	//*****************************************************	
	if colorValue == "White" then colorValue = "#FFFFFF"
	if colorValue == "Snow" then colorValue = "#FFFAFA"
	if colorValue == "HoneyDew" then colorValue = "#F0FFF0"
	if colorValue == "MintCream" then colorValue = "#F5FFFA"
	if colorValue == "Azure" then colorValue = "#F0F8FF"        
	if colorValue == "AliceBlue" then colorValue = "#F0F8FF"
	if colorValue == "GhostWhite" then colorValue = "#F8F8FF"
	if colorValue == "WhiteSmoke" then colorValue = "#F5F5F5"
	if colorValue == "SeaShell" then colorValue = "#FFF5EE"
	if colorValue == "Beige" then colorValue = "#F5F5DC"                                					
	if colorValue == "OldLace" then colorValue = "#FDF5E6"
	if colorValue == "FloralWhite" then colorValue = "#FFFAF0"
	if colorValue == "Ivory" then colorValue = "#FFFFF0"
	if colorValue == "AntiqueWhite" then colorValue = "#FAEBD7"
	if colorValue == "Linen" then colorValue = "#FAF0E6"
	if colorValue == "LavenderBlush" then colorValue = "#FFF0F5"        
	if colorValue == "MistyRose" then colorValue = "#FFE4E1"
	//*****************************************************
	// Grey HEX Codes
	//*****************************************************	
	if colorValue == "Gainsboro" then colorValue = "#DCDCDC"
	if colorValue == "LightGrey" then colorValue = "#D3D3D3"
	if colorValue == "Silver" then colorValue = "#C0C0C0"
	if colorValue == "DarkGrey" then colorValue = "#A9A9A9"
	if colorValue == "Grey" then colorValue = "#808080"        
	if colorValue == "DimGrey" then colorValue = "#696969"
	if colorValue == "LightSlateGray" then colorValue = "#778899"
	if colorValue == "SlateGrey" then colorValue = "#708090"
	if colorValue == "DarkSlateGrey" then colorValue = "#2F4F4F"
	if colorValue == "Black" then colorValue = "#000000"
	//*****************************************************                                      					   	
	//return "<color=" + char(34) + colorValue + char(34) + ">" + self + "</color>"
	return "<color=" + colorValue + ">" + self + "</color>"
end function

network_device_list = function(user = "", pass = "")
	locals.networkDevices = split(get_shell(locals.user, locals.pass).host_computer.network_devices, char(10))
	locals.networkDeviceList = []
	for device in locals.networkDevices
		if locals.device then locals.networkDeviceList.push(split(locals.device, " "))
	end for
	return locals.networkDeviceList
end function

// Look for a file
// @description **Description:**
// @description Check to see if the specified file exists
// @description ---
//
// @description **Parameters:**
// @param {string} filePath
// @description - `filePath`:`<string>`
// @param {string} `fileName`:`<string>`
// @description - `fileName`:`<string>`
//
// @description **Parameter Defaults:**
// @description - `none`
//
// @description **Return:**
// @return {boolean}
// @description `boolean`:`true`|`false`
// @description ---
//    
// @description **Author:** Svarii
// @description **Version:** 0.0.1
// @description ---
//
// @description ***footnotes***   
// @description Parameters are not checked for validity   
// @description ---        
//
// @example
// file_exists("/DatabaseDir", "addressData.db") // return true if found, otherwise false
// @description ---  		
	file_exists = function(filePath, fileName)
		locals.hostComputer = get_shell.host_computer
		locals.fileLocation = locals.filePath + "/" + locals.fileName
		locals.fileObj = locals.hostComputer.File(locals.fileLocation)
		if not locals.fileObj then
			return false
		else
			return true
		end if		
	end function

report = new report_string_construct__	//load common strings

systemBootstrap = function()
	//Load Objects
		locals.myComputer = get_shell.host_computer	//load local computer
		locals.hasBank = false
		locals.hasEmail = false
		locals.activeNetCard = "NONE"
		locals.hasNetworkDevice = false
		locals.hasLibDir = false
		locals.hasMetaxploit = false
		
	//Specify Wifi Information Database File Location
		locals.wifiInfo_fileLocation = home_dir + "Database" + "/wifiConnectionInfo.db"
		
	//Check Interfaces
		locals.networkDeviceList = network_device_list
		if (locals.networkDeviceList).len == 0 then locals.hasNetworkDevice = false
		if (locals.networkDeviceList).len > 0 then locals.hasNetworkDevice = true
		
	//Check User is Established
		if not user_mail_address then
			locals.hasEmail = false
			else if user_mail_address then
				locals.hasEmail = true
		end if

		if not user_bank_number then
			locals.hasBank = false
			else if user_bank_number then
				locals.hasBank = true
		end if
			
	//Check Hardware Connection Type
		locals.activeNetCard = locals.myComputer.active_net_card
		
	//Check for active internet access
		locals.isConnected = locals.myComputer.is_network_active
		
	//Check for lib directory
		locals.hasLibDir = typeof(myComputer.File("/lib"))

	//Check for metaxploit
			if (locals.myComputer.File("/lib")).is_folder == true then
				if file_exists("/lib/metaxploit.so") then
					locals.hasMetaxploit = true			
				else
					locals.hasMetaxploit = false					
				end if
			end if

	//Check for cryptoLib
			if (locals.myComputer.File("/lib")).is_folder == true then
				if file_exists("/lib/crypto.so") then
					locals.hasCryptoLib = true			
				else
					locals.hasCryptoLib = false					
				end if
			end if			

	//Check for Mail.txt
			if (locals.myComputer.File(home_dir + "/Config")).is_folder == true then
				if file_exists(home_dir + "/Config/Mail.txt") then
					locals.hasMailtxt = true			
				else
					locals.hasMailtxt = false					
				end if
			end if	
			
	//Check for Bank.txt
			if (locals.myComputer.File(home_dir + "/Config")).is_folder == true then
				if file_exists(home_dir + "/Config/Bank.txt") then
					locals.hasBanktxt = true			
				else
					locals.hasBanktxt = false					
				end if
			end if				

	//Check for /home/guest folder
			if (locals.myComputer.File("/home/guest")).is_folder == true then
					locals.hasGuestFolder = true			
				else
					locals.hasGuestFolder = false					
			end if				

		return {"has_network_device": locals.hasNetworkDevice, "has_email_account": locals.hasEmail, "has_bank_account": locals.hasBank, "active_net_card": locals.activeNetCard, "is_online": locals.isConnected, "has_lib_dir": locals.hasLibDir, "has_metaxploit": locals.hasMetaxploit, "has_cryptoLib": locals.hasCryptoLib, "has_mailtxt": locals.hasMailtxt, "has_banktxt": locals.hasBanktxt, "has_guestfolder": locals.hasGuestFolder} 
end function

//Declare Objects
bootstrap = new systemBootstrap
passString = report.action.check_network_devices + "."*(50-(report.action.check_network_devices).len) + "[" + report.pass.default.color("Green") + "]"
failString = report.action.check_network_devices + "."*(50-(report.action.check_network_devices).len) + "[" + report.fail.default.color("Red") + "]"
if not bootstrap.active_net_card == "ETHERNET" then
	if not bootstrap.active_net_card == "WIFI" then
		print char(9) + failString
	else
		print char(9) + passString
	end if
	else
		print char(9) + passString
end if

wait(0.3)

passString = report.action.has_internet + "."*(50-(report.action.has_internet).len) + "[" + report.pass.default.color("Green") + "]"
failString = report.action.has_internet + "."*(50-(report.action.has_internet).len) + "[" + report.fail.default.color("Red") + "]"
if bootstrap.is_online == true then
	print char(9) + passString
else
	print char(9) + failString
end if

wait(0.3)

passString = report.action.has_lib_dir + "."*(50-(report.action.has_lib_dir).len) + "[" + report.pass.default.color("Green") + "]"
failString = report.action.has_lib_dir + "."*(50-(report.action.has_lib_dir).len) + "[" + report.fail.default.color("Red") + "]"
if bootstrap.has_lib_dir == "file" then print char(9) + passString
if not bootstrap.has_lib_dir == "file" then print char(9) + failString

wait(0.3)

passString = report.action.has_metaxploit + "."*(50-(report.action.has_metaxploit).len) + "[" + report.pass.default.color("Green") + "]"
failString = report.action.has_metaxploit + "."*(50-(report.action.has_metaxploit).len) + "[" + report.fail.default.color("Red") + "]"
if bootstrap.has_metaxploit == true then print char(9) + passString
if bootstrap.has_metaxploit == false then print char(9) + failString

wait(0.3)

passString = report.action.has_cryptoLib + "."*(50-(report.action.has_cryptoLib).len) + "[" + report.pass.default.color("Green") + "]"
failString = report.action.has_cryptoLib + "."*(50-(report.action.has_cryptoLib).len) + "[" + report.fail.default.color("Red") + "]"
if bootstrap.has_cryptoLib == true then print char(9) + passString
if bootstrap.has_cryptoLib == false then print char(9) + failString

wait(0.3)

passString = report.action.check_user_email + "."*(50-(report.action.check_user_email).len) + "[" + report.pass.default.color("Green") + "]"
failString = report.action.check_user_email + "."*(50-(report.action.check_user_email).len) + "[" + report.fail.default.color("Red") + "]"

if bootstrap.has_email_account == true then print char(9) + passString
if bootstrap.has_email_account == false then print char(9) + failString

wait(0.3)

passString = report.action.check_user_bank + "."*(50-(report.action.check_user_bank).len) + "[" + report.pass.default.color("Green") + "]"
failString = report.action.check_user_bank + "."*(50-(report.action.check_user_bank).len) + "[" + report.fail.default.color("Red") + "]"

if bootstrap.has_bank_account == true then print char(9) + passString
if bootstrap.has_bank_account == false then print char(9) + failString

wait(0.3)

passString = report.action.has_banktxt + "."*(50-(report.action.has_banktxt).len) + "[" + report.pass.default.color("Orange") + "]"
failString = report.action.has_banktxt + "."*(50-(report.action.has_banktxt).len) + "[" + report.fail.default.color("Green") + "]"

if bootstrap.has_banktxt == true then print char(9) + passString
if bootstrap.has_banktxt == false then print char(9) + failString

wait(0.3)

passString = report.action.has_mailtxt + "."*(50-(report.action.has_mailtxt).len) + "[" + report.pass.default.color("Orange") + "]"
failString = report.action.has_mailtxt + "."*(50-(report.action.has_mailtxt).len) + "[" + report.fail.default.color("Green") + "]"

if bootstrap.has_mailtxt == true then print char(9) + passString
if bootstrap.has_mailtxt == false then print char(9) + failString

wait(0.3)

passString = report.action.has_guestfolder + "."*(50-(report.action.has_guestfolder).len) + "[" + report.pass.default.color("Orange") + "]"
failString = report.action.has_guestfolder + "."*(50-(report.action.has_guestfolder).len) + "[" + report.fail.default.color("Green") + "]"

if bootstrap.has_guestfolder == true then print char(9) + passString
if bootstrap.has_guestfolder == false then print char(9) + failString

wait(0.3)

//TODO: Add Gate Here

//import_code("/lib/airlink.so")

// Program Start
if params.len > 0 then
    if params[0] == "-h" or params[0] == "-help" then
        print "Usage  : airlink [opt:cracked wifi file location]".bold
        print "Example: airlink".bold
        print "Example: airlink /etc/wifiFilePasswords".bold
        exit
    else
        wifiFileLocation = params[0]
    end if
end if

wifiFileLocation = home_dir + "/Database/wifiPasswordList"

clear_screen
keepAlive = true
bounceWifi = false
output = []
selectedNetwork = 0 //default to first one found
selectedWifiSignal = 0
selectedNetworkDevice = null
networkDeviceList = network_device_list
myComputer = get_shell.host_computer
rndWait = 0


while keepAlive == true

    if bounceWifi == true then
        randomWifiSelection = (wifiFileContent.len - 1).random_from
        selectedWifiSignal = randomWifiSelection
        wifiInfo = wifiFileContent[randomWifiSelection - 1].split(" ")
        essid = wifiInfo[1].trim
        bssid = wifiInfo[0].trim
        wifiPassword = wifiInfo[2].trim
        myComputer.connect_wifi(selectedNetworkDevice, bssid, essid, wifiPassword)
        waitTime = 60
        rndWait = waitTime.random_from
        //print "Connecting to " + essid + " for " + rndWait + " seconds..."
    end if

wifiFile = myComputer.File(wifiFileLocation)
if typeof(wifiFile) == "file" then
    wifiFileContent = ((wifiFile.get_content).remove_char_last).split(char(10))
else
    myComputer.touch(home_dir + "/Database", "wifiPasswordList")
    wifiFileContent = []
end if    
	if selectedNetworkDevice == null then
		output.push(("Device".pos("0%") + " " + "Name".pos("12%") + " " + "Monitoring".pos("30%")).underline)
		for networkDevice in networkDeviceList
			if __networkDevice_idx == selectedNetwork then
				output.push((networkDevice[0].pos("1%") + " " + networkDevice[1].pos("13%") + " " + networkDevice[2].pos("31%")).mark)
			else
				output.push(networkDevice[0].pos("1%") + " " + networkDevice[1].pos("13%") + " " + networkDevice[2].pos("31%"))
			end if
		end for
	end if
	if not selectedNetworkDevice == null then
		//output.push(str(networkDeviceList[selectedNetwork]).underline)
        output.push("Selecte Network to Crack [F1]-Bounce Connection".underline)
		for wifiNetwork in wifiNetworkList
            for connection in wifiFileContent
                knownBSSID = connection.split(" ")[0]
                currentBSSID = wifiNetwork.split(" ")[0]
                if knownBSSID == currentBSSID then
                    lineColor = "Lime"
                    break
                else
                    lineColor = "Crimson"
                end if
            end for            
			if __wifiNetwork_idx == selectedWifiSignal then
				output.push(((wifiNetwork.line_indent("1em")).color(lineColor).mark))
			else 
				output.push((wifiNetwork.line_indent("1em")).color(lineColor))
			end if
		end for
	end if


    if rndWait == 0 then
		for line in output
			print line
		end for
    	userInput = user_input("", false, true)
    else
		for i in range(rndWait, 0, -1)
			print ("Bouncing Connecting in " + i).bold.underline
			for line in output
				print line
			end for			
			wait
			clear_screen
		end for
    end if
	
    wait(0.3); clear_screen
	output = []
	if selectedNetworkDevice == null then
		if userInput == "UpArrow" then
			selectedNetwork = selectedNetwork.minus.clamp(0, networkDeviceList.len - 1)
		end if
		if userInput == "DownArrow" then
			selectedNetwork = selectedNetwork.plus.clamp(0, networkDeviceList.len - 1)
		end if
		if userInput == "RightArrow" then
			selectedNetworkDevice = networkDeviceList[selectedNetwork][0]
			wifiNetworkList = myComputer.wifi_networks(selectedNetworkDevice.trim)
		end if	
		if userInput == "LeftArrow" then
			break
		end if	        		
	else      
		if userInput == "UpArrow" then
			selectedWifiSignal = selectedWifiSignal.minus.clamp(0, wifiNetworkList.len - 1)
		end if
		if userInput == "DownArrow" then
			selectedWifiSignal = selectedWifiSignal.plus.clamp(0, wifiNetworkList.len - 1)
		end if	
		if userInput == "LeftArrow" then
			selectedNetworkDevice = null
		end if						
		if userInput == "RightArrow" then
			Crypto = include_lib("/lib/crypto.so")
                Crypto.airmon("start", selectedNetworkDevice)
                wifiInfo = wifiNetworkList[selectedWifiSignal].split(" ")
                acks = (get_acks(to_int(str(wifiInfo[1].remove_char_last))))
                essid = wifiInfo[2].trim
                bssid = wifiInfo[0].trim
                print "Gathering " + str(acks).bold + " ACKs from " + essid.bold
                Crypto.aireplay(bssid, essid, acks)
                wifiPassword = Crypto.aircrack(current_path + "/file.cap")
                myComputer.connect_wifi(selectedNetworkDevice, bssid, essid, wifiPassword)
                myComputer.File(current_path + "/file.cap").delete
                clear_screen
                Crypto.airmon("stop", selectedNetworkDevice)
                file_append(home_dir + "/Database", "wifiPasswordList", bssid + " " + essid + " " + wifiPassword + " " + wifiInfo[1] + char(10))
        end if
        if userInput == "F1" then
            if bounceWifi == false then
                bounceWifi = true
            else
                bounceWifi = false
            end if
        end if
	end if
end while
